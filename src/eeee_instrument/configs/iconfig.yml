# Configuration for the Bluesky instrument package.

# identify the version of this iconfig.yml file
ICONFIG_VERSION: 2.0.0

# Add additional configuration for use with your instrument.

### The short name for the databroker catalog.
DATABROKER_CATALOG: &databroker_catalog temp

### RunEngine configuration
RUN_ENGINE:
    DEFAULT_METADATA:
        beamline_id: demo_instrument
        instrument_name: Most Glorious Scientific Instrument
        proposal_id: commissioning
        databroker_catalog: *databroker_catalog

    ### EPICS PV to use for the `scan_id`.
    ### Default: `RE.md["scan_id"]` (not using an EPICS PV)
    # SCAN_ID_PV: "IOC:bluesky_scan_id"

    ### Where to "autosave" the RE.md dictionary.
    ### Defaults:
    MD_STORAGE_HANDLER: StoredDict
    MD_PATH: .re_md_dict.yml

    ### The progress bar is nice to see,
    ### except when it clutters the output in Jupyter notebooks.
    ### Default: False
    USE_PROGRESS_BAR: false

# Command-line tools, such as %wa, %ct, ...
USE_BLUESKY_MAGICS: true

### Best Effort Callback Configurations
### Defaults: all true
### except no plots in queueserver
BEC:
    BASELINE: true
    HEADING: true
    PLOTS: false
    TABLE: true

### Support for known output file formats.
### Uncomment to use.  If undefined, will not write that type of file.
### Each callback should apply its configuration from here.
NEXUS_DATA_FILES:
    ENABLE: false
    FILE_EXTENSION: hdf

SPEC_DATA_FILES:
    ENABLE: true
    FILE_EXTENSION: dat

### APS Data Management
### Use bash shell, deactivate all conda environments, source this file:
DM_SETUP_FILE: "/home/dm/etc/dm.setup.sh"

### Local OPHYD Device Control Yaml
DEVICES_FILES: devices.yml
APS_DEVICES_FILES: devices_aps_only.yml

# ----------------------------------

OPHYD:
    ### Control layer for ophyd to communicate with EPICS.
    ### Default: PyEpics
    ### Choices: "PyEpics" or "caproto" # caproto is not yet supported
    CONTROL_LAYER: PyEpics

    ### default timeouts (seconds)
    TIMEOUTS:
        PV_READ: &TIMEOUT 5
        PV_WRITE: *TIMEOUT
        PV_CONNECTION: *TIMEOUT

# Control detail of exception traces in IPython (console and notebook).
# Options are: Minimal, Plain, Verbose
XMODE_DEBUG_LEVEL: Plain
